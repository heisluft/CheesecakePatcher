--- src/main/java/eu/hackathon/cheesecake/utils/MathUtils.java
+++ src/main/java/eu/hackathon/cheesecake/utils/MathUtils.java
@@ -15,5 +15,5 @@
     /**
      * The Constructor.
-     * <p>
+     * 
      * <p>The Constructor is private.</p>
      */
@@ -24,5 +24,5 @@
     /**
      * Returns the given value clamped between minimum and maximum.
-     * <p>
+     * 
      * <p>This method checks if a value is bigger than a given maximum and returns the maximum if its bigger. This
      * method checks if a value is smaller than a given minimum and returns the minimum if its smaller. Else the original
@@ -40,5 +40,5 @@
     /**
      * Returns the given value clamped between minimum and maximum.
-     * <p>
+     * 
      * <p>This method checks if a value is bigger than a given maximum and returns the maximum if its bigger. This
      * method checks if a value is smaller than a given minimum and returns the minimum if its smaller. Else the original
@@ -69,5 +69,5 @@
     /**
      * Returns the number as roman number.
-     * <p>
+     * 
      * <p>This method converts a given integer value into a roman number. This number is represented as a
      * simple string.</p>
@@ -77,5 +77,5 @@
      */
     public static String toRoman(int value) {
-        String result = "";
+        StringBuilder result = new StringBuilder();
 
         for (int i = 0; i < ROMAN_CHARACTER_VALUES.length; i++) {
@@ -85,9 +85,10 @@
                 continue;
             }
-            result += numberInPlace == 4 && i > 0 ? ROMAN_CHARACTERS[i] + ROMAN_CHARACTERS[i - 1] : new String(new char[numberInPlace]).replace("\0", ROMAN_CHARACTERS[i]);
+            result.append(numberInPlace == 4 && i > 0 ? ROMAN_CHARACTERS[i] + ROMAN_CHARACTERS[i - 1] : new String(
+                    new char[numberInPlace]).replace("\0", ROMAN_CHARACTERS[i]));
 
             value = value % ROMAN_CHARACTER_VALUES[i];
         }
-        return result;
+        return result.toString();
     }
 }
